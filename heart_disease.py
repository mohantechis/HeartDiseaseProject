# -*- coding: utf-8 -*-
"""Heart_disease.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13T0bJUGx_1erSOXoEG3LYXCtvuEEwUhG
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/drive/MyDrive/Dataset/heart.csv')

df.head()

"""1.Age

2.Sex

3.cp(chest pain type (4 values))

4.Resting blood pressure

5.serum cholestoral in mg/dl

6.fasting blood sugar > 120 mg/dl

7.resting electrocardiographic results (values 0,1,2)

8.maximum heart rate achieved

9.exercise induced angina

10.oldpeak = ST depression induced by exercise relative to rest

11.the slope of the peak exercise ST segment

12.number of major vessels (0-3) colored by flourosopy

13.thal: 3 = normal; 6 = fixed defect; 7 = reversable defect
"""

df.tail()

df.shape

"""This Dataset Has 303 rows and 14 Columns

"""

df.info()

df.describe()

df.isnull().sum()

df.dtypes

age_count=df.age[df.target==1]

plt.figure(figsize=(8,8))
age_count.hist(bins=6,width=2)
plt.ylabel("Number of Effected Patient")
plt.xlabel("Age")
plt.title("Frequency Distribution")
plt.show()

df.columns



#sex_value=df.sex.value_counts()
sex_effected=df.sex[df.target==1].value_counts()

sex_effected.plot(kind='bar')

plt.title("Man Vs Women Patient")
plt.xlabel("sex")
plt.ylabel("No. of patient")
plt.xticks(rotation=0)
plt.show()

plt.figure(figsize=(8, 8))
sns.countplot(df.cp, hue = df.target);
plt.show()

plt.figure(figsize=(20, 8))
sns.countplot(df.thalach, hue = df.target);
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(20, 8))
sns.countplot(df.trestbps, hue = df.target);

plt.show()



plt.figure(figsize=(12, 8))
sns.countplot(df.cp, hue = df.target);
plt.show()

corr=df.corr()
plt.figure(figsize=(11,11))
sns.heatmap(corr,annot=True)
plt.show()

X=df.drop('target',axis=1)
y=df['target']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=2)

X_train.shape

X_test.shape

from sklearn.preprocessing import StandardScaler,MinMaxScaler
min_max_scaler=MinMaxScaler()
X_train_minmax=min_max_scaler.fit_transform(X_train)

X_test_minmax=min_max_scaler.fit_transform(X_test)

from sklearn.model_selection import KFold
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import plot_confusion_matrix
from sklearn.metrics import classification_report
from xgboost import XGBClassifier
lr=LogisticRegression()
lr.fit(X_train_minmax,y_train)
y_predict=lr.predict(X_test_minmax)
LR=round(lr.score(X_train_minmax,y_train)*100,2)
print("Accuracy on Train Data: ",LR)

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train_minmax,y_train)
y_pred=knn.predict(X_test_minmax)
acc_knn=round(knn.score(X_train_minmax,y_train)*100,2)
print("KNN:- Accuracy on train Data",acc_knn)

from sklearn.naive_bayes import GaussianNB

gaussian=GaussianNB()
gaussian.fit(X_train_minmax,y_train)
y_pred=gaussian.predict(X_test_minmax)
acc_nb=round(gaussian.score(X_train_minmax,y_train)*100,2)
print("Gaussian:-Accuracy on Train Data: ",acc_nb)

from sklearn.tree import DecisionTreeClassifier

dt=DecisionTreeClassifier()
dt.fit(X_train_minmax,y_train)
y_pred=dt.predict(X_test_minmax)
acc_dt=round(dt.score(X_train_minmax,y_train)*100,2)
print("Decision Tree:- Accuracy on train Data : ",acc_dt)

from sklearn.ensemble import RandomForestClassifier

rf=RandomForestClassifier()
rf.fit(X_train_minmax,y_train)
y_pred=rf.predict(X_test_minmax)
acc_rf=round(rf.score(X_train_minmax,y_train)*100,2)
print("Random Forest :- Accuracy on Train Data: ",acc_rf)

from xgboost import XGBClassifier
model=XGBClassifier()
model.fit(X_train_minmax,y_train)
y_pred=model.predict(X_test_minmax)
acc_model=round(model.score(X_train_minmax,y_train)*100,2)
print("XGB :- Accuracy on Train Data: ",acc_model)

"""Accuracy Of this model is 98.35% 


"""